package Leetcode.Knowledge.Threads;
//?????????????????????????????????????
//???????????????????????????????????????????????????????????????????????????
// 1-50 51-100  
//1 create thread Java 1 implemet Runnable -->override run ?????????????
//   ???????????????????????????
//2.SecondThread extends Thread ???????????????????start 
// run  1.???????????????????????????????2.???????????????????????
//????????????????????????
public class AccumulateThread implements Runnable {

    int myno;
    int n;
	int begin;
	int end;
     //?????????
	static int totalsum=0; //????????????????????
	static int addfinishnum=0;
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		try
		{
			int sum=0;//?????????
			for(int i=begin;i<=end;i++)
			{
				sum+=i;
			}
			System.out.println(begin+" to "+end + "   from "+Thread.currentThread().getName()+"------sum="+sum);
			
			//???-PV????????????????????????
			synchronized(this)
			{
				//?????????
				addfinishnum++;
				for(int i=1;i<=10000000;i++)
				{
					 
				}
				Thread.sleep(1000);
				totalsum+=sum;
				if(addfinishnum==n)//?????????????????????????????????
				{
					System.out.println("Accumulation is over,totalsum= "+totalsum);
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public AccumulateThread(int mybegin,int myend,int myno,int n)
	{
		this.begin=mybegin;
		this.end=myend;
		this.myno=myno;
		this.n=n;
	}
	
	//????????????????????????????????????
	public static void Add1() throws InterruptedException
	{
		int n = 3;
		int beginnum=1;
		int endnum=100;
        int scope = (endnum - beginnum+1) / n;
        int scope2 = (endnum - beginnum + 1) % n;
        while (scope2!=0)//????????????????????????????????????
        {
            n++;
            scope = (endnum - beginnum + 1) / n;
            scope2 = (endnum-beginnum+1) % n;
        }
        for (int i = 1; i <= n; i++)
        {
  
        	int begin=(i - 1) * scope+1;
        	int end=i*scope;
        	AccumulateThread t=new AccumulateThread(begin,end,i,n);
        	Thread th=new Thread(t);
        	th.setName("??"+i+"?????");
        	th.start();
        }
	}
	
	//?????????????????????????????????????????????????
	//1-100 1-50  51-100
	// 1-100 3  
	public static void Add2() 
	{
		int n = 3;//???????
		int beginnum=1; //??????????
		int endnum=100;
		//100-1+1/2 =50
		int scope = (endnum - beginnum+1) / n;//33
		for(int i=1;i<=n;i++)
		{
			int begin=(i - 1) * scope+1; // ???????? from 1  ???????? from 51
			int end=i*scope; // ???????? to 5 ???????? to 100
			if(i==n)
			{
				end=endnum;
			}
			//?????????????
			AccumulateThread t=new AccumulateThread(begin,end,i,n);
			//??????????????????????????
			Thread th=new Thread(t);
			th.start();
		}
		System.out.println("ok");
	}

	public static void main(String[] args)  {		 
		//????????
		 
			AccumulateThread.Add2();
		 
	}


}
